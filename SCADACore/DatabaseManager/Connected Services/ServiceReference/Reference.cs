//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseManager.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IDatabaseManagerService", CallbackContract=typeof(DatabaseManager.ServiceReference.IDatabaseManagerServiceCallback))]
    public interface IDatabaseManagerService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManagerService/initService")]
        void initService();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManagerService/initService")]
        System.Threading.Tasks.Task initServiceAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/logIn", ReplyAction="http://tempuri.org/IDatabaseManagerService/logInResponse")]
        string logIn(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/logIn", ReplyAction="http://tempuri.org/IDatabaseManagerService/logInResponse")]
        System.Threading.Tasks.Task<string> logInAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/register", ReplyAction="http://tempuri.org/IDatabaseManagerService/registerResponse")]
        bool register(string username, string password, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/register", ReplyAction="http://tempuri.org/IDatabaseManagerService/registerResponse")]
        System.Threading.Tasks.Task<bool> registerAsync(string username, string password, string role);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManagerService/addUpdateAO")]
        void addUpdateAO(string operation, string id, string description, string address, double initvalue, double lowlimit, double highlimit);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManagerService/addUpdateAO")]
        System.Threading.Tasks.Task addUpdateAOAsync(string operation, string id, string description, string address, double initvalue, double lowlimit, double highlimit);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManagerService/addUpdateAI")]
        void addUpdateAI(string operation, string id, string description, string address, int scantime, bool onoffscan, double lowlimit, double highlimit, string units, string driver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManagerService/addUpdateAI")]
        System.Threading.Tasks.Task addUpdateAIAsync(string operation, string id, string description, string address, int scantime, bool onoffscan, double lowlimit, double highlimit, string units, string driver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManagerService/addUpdateDO")]
        void addUpdateDO(string operation, string id, string description, string address, double initvalue);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManagerService/addUpdateDO")]
        System.Threading.Tasks.Task addUpdateDOAsync(string operation, string id, string description, string address, double initvalue);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManagerService/addUpdateDI")]
        void addUpdateDI(string operation, string id, string description, string address, int scantime, bool onoffscan, string driver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManagerService/addUpdateDI")]
        System.Threading.Tasks.Task addUpdateDIAsync(string operation, string id, string description, string address, int scantime, bool onoffscan, string driver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManagerService/changeValueAO")]
        void changeValueAO(string id, double value);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManagerService/changeValueAO")]
        System.Threading.Tasks.Task changeValueAOAsync(string id, double value);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManagerService/changeValueDO")]
        void changeValueDO(string id, double value);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManagerService/changeValueDO")]
        System.Threading.Tasks.Task changeValueDOAsync(string id, double value);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManagerService/deleteAO")]
        void deleteAO(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManagerService/deleteAO")]
        System.Threading.Tasks.Task deleteAOAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManagerService/deleteDO")]
        void deleteDO(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManagerService/deleteDO")]
        System.Threading.Tasks.Task deleteDOAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManagerService/deleteAI")]
        void deleteAI(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManagerService/deleteAI")]
        System.Threading.Tasks.Task deleteAIAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManagerService/deleteDI")]
        void deleteDI(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManagerService/deleteDI")]
        System.Threading.Tasks.Task deleteDIAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManagerService/addTagAlarm")]
        void addTagAlarm(string analogtagid, string id, string type, double value, string unit, int priority);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManagerService/addTagAlarm")]
        System.Threading.Tasks.Task addTagAlarmAsync(string analogtagid, string id, string type, double value, string unit, int priority);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManagerService/removeTagAlarm")]
        void removeTagAlarm(string tagid, string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManagerService/removeTagAlarm")]
        System.Threading.Tasks.Task removeTagAlarmAsync(string tagid, string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManagerService/TurnScanOnOff")]
        void TurnScanOnOff(string tagType, string tagId, bool onOff);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManagerService/TurnScanOnOff")]
        System.Threading.Tasks.Task TurnScanOnOffAsync(string tagType, string tagId, bool onOff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/getAOs", ReplyAction="http://tempuri.org/IDatabaseManagerService/getAOsResponse")]
        string getAOs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/getAOs", ReplyAction="http://tempuri.org/IDatabaseManagerService/getAOsResponse")]
        System.Threading.Tasks.Task<string> getAOsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/getAIs", ReplyAction="http://tempuri.org/IDatabaseManagerService/getAIsResponse")]
        string getAIs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/getAIs", ReplyAction="http://tempuri.org/IDatabaseManagerService/getAIsResponse")]
        System.Threading.Tasks.Task<string> getAIsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/getDOs", ReplyAction="http://tempuri.org/IDatabaseManagerService/getDOsResponse")]
        string getDOs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/getDOs", ReplyAction="http://tempuri.org/IDatabaseManagerService/getDOsResponse")]
        System.Threading.Tasks.Task<string> getDOsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/getDIs", ReplyAction="http://tempuri.org/IDatabaseManagerService/getDIsResponse")]
        string getDIs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/getDIs", ReplyAction="http://tempuri.org/IDatabaseManagerService/getDIsResponse")]
        System.Threading.Tasks.Task<string> getDIsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/getStrAO", ReplyAction="http://tempuri.org/IDatabaseManagerService/getStrAOResponse")]
        string getStrAO(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/getStrAO", ReplyAction="http://tempuri.org/IDatabaseManagerService/getStrAOResponse")]
        System.Threading.Tasks.Task<string> getStrAOAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/getStrAI", ReplyAction="http://tempuri.org/IDatabaseManagerService/getStrAIResponse")]
        string getStrAI(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/getStrAI", ReplyAction="http://tempuri.org/IDatabaseManagerService/getStrAIResponse")]
        System.Threading.Tasks.Task<string> getStrAIAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/getStrDO", ReplyAction="http://tempuri.org/IDatabaseManagerService/getStrDOResponse")]
        string getStrDO(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/getStrDO", ReplyAction="http://tempuri.org/IDatabaseManagerService/getStrDOResponse")]
        System.Threading.Tasks.Task<string> getStrDOAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/getStrDI", ReplyAction="http://tempuri.org/IDatabaseManagerService/getStrDIResponse")]
        string getStrDI(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/getStrDI", ReplyAction="http://tempuri.org/IDatabaseManagerService/getStrDIResponse")]
        System.Threading.Tasks.Task<string> getStrDIAsync(string id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDatabaseManagerServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseManagerService/notifyClient")]
        void notifyClient(string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDatabaseManagerServiceChannel : DatabaseManager.ServiceReference.IDatabaseManagerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DatabaseManagerServiceClient : System.ServiceModel.DuplexClientBase<DatabaseManager.ServiceReference.IDatabaseManagerService>, DatabaseManager.ServiceReference.IDatabaseManagerService {
        
        public DatabaseManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public DatabaseManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public DatabaseManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void initService() {
            base.Channel.initService();
        }
        
        public System.Threading.Tasks.Task initServiceAsync() {
            return base.Channel.initServiceAsync();
        }
        
        public string logIn(string username, string password) {
            return base.Channel.logIn(username, password);
        }
        
        public System.Threading.Tasks.Task<string> logInAsync(string username, string password) {
            return base.Channel.logInAsync(username, password);
        }
        
        public bool register(string username, string password, string role) {
            return base.Channel.register(username, password, role);
        }
        
        public System.Threading.Tasks.Task<bool> registerAsync(string username, string password, string role) {
            return base.Channel.registerAsync(username, password, role);
        }
        
        public void addUpdateAO(string operation, string id, string description, string address, double initvalue, double lowlimit, double highlimit) {
            base.Channel.addUpdateAO(operation, id, description, address, initvalue, lowlimit, highlimit);
        }
        
        public System.Threading.Tasks.Task addUpdateAOAsync(string operation, string id, string description, string address, double initvalue, double lowlimit, double highlimit) {
            return base.Channel.addUpdateAOAsync(operation, id, description, address, initvalue, lowlimit, highlimit);
        }
        
        public void addUpdateAI(string operation, string id, string description, string address, int scantime, bool onoffscan, double lowlimit, double highlimit, string units, string driver) {
            base.Channel.addUpdateAI(operation, id, description, address, scantime, onoffscan, lowlimit, highlimit, units, driver);
        }
        
        public System.Threading.Tasks.Task addUpdateAIAsync(string operation, string id, string description, string address, int scantime, bool onoffscan, double lowlimit, double highlimit, string units, string driver) {
            return base.Channel.addUpdateAIAsync(operation, id, description, address, scantime, onoffscan, lowlimit, highlimit, units, driver);
        }
        
        public void addUpdateDO(string operation, string id, string description, string address, double initvalue) {
            base.Channel.addUpdateDO(operation, id, description, address, initvalue);
        }
        
        public System.Threading.Tasks.Task addUpdateDOAsync(string operation, string id, string description, string address, double initvalue) {
            return base.Channel.addUpdateDOAsync(operation, id, description, address, initvalue);
        }
        
        public void addUpdateDI(string operation, string id, string description, string address, int scantime, bool onoffscan, string driver) {
            base.Channel.addUpdateDI(operation, id, description, address, scantime, onoffscan, driver);
        }
        
        public System.Threading.Tasks.Task addUpdateDIAsync(string operation, string id, string description, string address, int scantime, bool onoffscan, string driver) {
            return base.Channel.addUpdateDIAsync(operation, id, description, address, scantime, onoffscan, driver);
        }
        
        public void changeValueAO(string id, double value) {
            base.Channel.changeValueAO(id, value);
        }
        
        public System.Threading.Tasks.Task changeValueAOAsync(string id, double value) {
            return base.Channel.changeValueAOAsync(id, value);
        }
        
        public void changeValueDO(string id, double value) {
            base.Channel.changeValueDO(id, value);
        }
        
        public System.Threading.Tasks.Task changeValueDOAsync(string id, double value) {
            return base.Channel.changeValueDOAsync(id, value);
        }
        
        public void deleteAO(string id) {
            base.Channel.deleteAO(id);
        }
        
        public System.Threading.Tasks.Task deleteAOAsync(string id) {
            return base.Channel.deleteAOAsync(id);
        }
        
        public void deleteDO(string id) {
            base.Channel.deleteDO(id);
        }
        
        public System.Threading.Tasks.Task deleteDOAsync(string id) {
            return base.Channel.deleteDOAsync(id);
        }
        
        public void deleteAI(string id) {
            base.Channel.deleteAI(id);
        }
        
        public System.Threading.Tasks.Task deleteAIAsync(string id) {
            return base.Channel.deleteAIAsync(id);
        }
        
        public void deleteDI(string id) {
            base.Channel.deleteDI(id);
        }
        
        public System.Threading.Tasks.Task deleteDIAsync(string id) {
            return base.Channel.deleteDIAsync(id);
        }
        
        public void addTagAlarm(string analogtagid, string id, string type, double value, string unit, int priority) {
            base.Channel.addTagAlarm(analogtagid, id, type, value, unit, priority);
        }
        
        public System.Threading.Tasks.Task addTagAlarmAsync(string analogtagid, string id, string type, double value, string unit, int priority) {
            return base.Channel.addTagAlarmAsync(analogtagid, id, type, value, unit, priority);
        }
        
        public void removeTagAlarm(string tagid, string id) {
            base.Channel.removeTagAlarm(tagid, id);
        }
        
        public System.Threading.Tasks.Task removeTagAlarmAsync(string tagid, string id) {
            return base.Channel.removeTagAlarmAsync(tagid, id);
        }
        
        public void TurnScanOnOff(string tagType, string tagId, bool onOff) {
            base.Channel.TurnScanOnOff(tagType, tagId, onOff);
        }
        
        public System.Threading.Tasks.Task TurnScanOnOffAsync(string tagType, string tagId, bool onOff) {
            return base.Channel.TurnScanOnOffAsync(tagType, tagId, onOff);
        }
        
        public string getAOs() {
            return base.Channel.getAOs();
        }
        
        public System.Threading.Tasks.Task<string> getAOsAsync() {
            return base.Channel.getAOsAsync();
        }
        
        public string getAIs() {
            return base.Channel.getAIs();
        }
        
        public System.Threading.Tasks.Task<string> getAIsAsync() {
            return base.Channel.getAIsAsync();
        }
        
        public string getDOs() {
            return base.Channel.getDOs();
        }
        
        public System.Threading.Tasks.Task<string> getDOsAsync() {
            return base.Channel.getDOsAsync();
        }
        
        public string getDIs() {
            return base.Channel.getDIs();
        }
        
        public System.Threading.Tasks.Task<string> getDIsAsync() {
            return base.Channel.getDIsAsync();
        }
        
        public string getStrAO(string id) {
            return base.Channel.getStrAO(id);
        }
        
        public System.Threading.Tasks.Task<string> getStrAOAsync(string id) {
            return base.Channel.getStrAOAsync(id);
        }
        
        public string getStrAI(string id) {
            return base.Channel.getStrAI(id);
        }
        
        public System.Threading.Tasks.Task<string> getStrAIAsync(string id) {
            return base.Channel.getStrAIAsync(id);
        }
        
        public string getStrDO(string id) {
            return base.Channel.getStrDO(id);
        }
        
        public System.Threading.Tasks.Task<string> getStrDOAsync(string id) {
            return base.Channel.getStrDOAsync(id);
        }
        
        public string getStrDI(string id) {
            return base.Channel.getStrDI(id);
        }
        
        public System.Threading.Tasks.Task<string> getStrDIAsync(string id) {
            return base.Channel.getStrDIAsync(id);
        }
    }
}
